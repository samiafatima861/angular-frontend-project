{
  "version": 3,
  "sources": ["../../../../../node_modules/ngx-indexed-db/fesm2022/ngx-indexed-db.mjs"],
  "sourcesContent": ["import * as i0 from '@angular/core';\nimport { InjectionToken, isDevMode, Injectable, Inject, assertInInjectionContext, inject, PLATFORM_ID, makeEnvironmentProviders, NgModule } from '@angular/core';\nimport { __decorate } from 'tslib';\nimport { Observable, from, combineLatest, Subject } from 'rxjs';\nimport { finalize, take } from 'rxjs/operators';\nimport { isPlatformBrowser, DOCUMENT } from '@angular/common';\nvar DBMode;\n(function (DBMode) {\n  DBMode[\"readonly\"] = \"readonly\";\n  DBMode[\"readwrite\"] = \"readwrite\";\n})(DBMode || (DBMode = {}));\nconst CONFIG_TOKEN = new InjectionToken(null);\nconst INDEXED_DB = new InjectionToken('Indexed DB');\n/**\n * Token used to inject the indexed db implementation on the server\n */\nconst SERVER_INDEXED_DB = new InjectionToken('Server Indexed DB');\nfunction validateStoreName(db, storeName) {\n  return db.objectStoreNames.contains(storeName);\n}\nfunction validateBeforeTransaction(db, storeName, reject) {\n  if (!db) {\n    reject('You need to use the openDatabase function to create a database before you query it!');\n    return; // Stop further execution\n  }\n  if (!validateStoreName(db, storeName)) {\n    reject(`objectStore does not exists: ${storeName}`);\n  }\n}\nfunction createTransaction(db, options) {\n  const trans = db.transaction(options.storeName, options.dbMode);\n  trans.onerror = options.error;\n  trans.onabort = options.abort;\n  return trans;\n}\nfunction optionsGenerator(type, storeName, reject, resolve) {\n  return {\n    storeName,\n    dbMode: type,\n    error: e => {\n      reject(e);\n    },\n    abort: e => {\n      reject(e);\n    }\n  };\n}\nconst openedDatabases = [];\nfunction openDatabase(indexedDB, dbName, version, upgradeCallback) {\n  return new Promise((resolve, reject) => {\n    if (!indexedDB) {\n      reject('IndexedDB not available');\n    }\n    const request = indexedDB.open(dbName, version);\n    let db;\n    request.onsuccess = event => {\n      db = request.result;\n      openedDatabases.push(db);\n      resolve(db);\n    };\n    request.onerror = event => {\n      reject(`IndexedDB error: ${request.error}`);\n    };\n    if (typeof upgradeCallback === 'function') {\n      request.onupgradeneeded = event => {\n        upgradeCallback(event, db);\n      };\n    }\n  });\n}\nasync function CreateObjectStore(indexedDB, dbName, version, storeSchemas, migrationFactory) {\n  return new Promise((resolve, reject) => {\n    if (!indexedDB) {\n      return;\n    }\n    const request = indexedDB.open(dbName, version);\n    request.onupgradeneeded = async event => {\n      const database = event.target.result;\n      const storeCreationPromises = storeSchemas.map(async storeSchema => {\n        if (!database.objectStoreNames.contains(storeSchema.store)) {\n          const objectStore = database.createObjectStore(storeSchema.store, storeSchema.storeConfig);\n          for (const schema of storeSchema.storeSchema) {\n            objectStore.createIndex(schema.name, schema.keypath, schema.options);\n          }\n        }\n      });\n      await Promise.all(storeCreationPromises);\n      const storeMigrations = migrationFactory && migrationFactory();\n      if (storeMigrations) {\n        const migrationKeys = Object.keys(storeMigrations).map(k => parseInt(k, 10)).filter(v => v > event.oldVersion).sort((a, b) => a - b);\n        for (const v of migrationKeys) {\n          storeMigrations[v](database, request.transaction);\n        }\n      }\n      database.close();\n      resolve();\n    };\n    request.onsuccess = e => {\n      e.target.result.close();\n      resolve();\n    };\n    request.onerror = error => {\n      reject(error);\n    };\n  });\n}\nfunction DeleteObjectStore(dbName, version, storeName) {\n  if (!dbName || !version || !storeName) {\n    throw Error('Params: \"dbName\", \"version\", \"storeName\" are mandatory.');\n  }\n  return new Observable(obs => {\n    try {\n      const newVersion = version + 1;\n      const request = indexedDB.open(dbName, newVersion);\n      request.onupgradeneeded = event => {\n        const database = event.target.result;\n        database.deleteObjectStore(storeName);\n        database.close();\n        console.log('onupgradeneeded');\n        obs.next(true);\n        obs.complete();\n      };\n      request.onerror = e => obs.error(e);\n    } catch (error) {\n      obs.error(error);\n    }\n  });\n}\nfunction closeDatabase(db) {\n  return new Promise((resolve, reject) => {\n    if (!db) {\n      reject(new Error('No database to close'));\n      return;\n    }\n    try {\n      db.close();\n      resolve();\n    } catch (error) {\n      reject(`Error closing database: ${error}`);\n    }\n  });\n}\nfunction CloseDbConnection() {\n  return function (_target, _propertyKey, descriptor) {\n    const originalMethod = descriptor.value;\n    descriptor.value = function (...args) {\n      const result = originalMethod.apply(this, args);\n      if (result instanceof Observable) {\n        return result.pipe(finalize(async () => {\n          const promises = openedDatabases.map(async db => {\n            await closeDatabase(db);\n          });\n          await Promise.all(promises);\n          openedDatabases.length = 0;\n        }));\n      }\n      return result;\n    };\n    return descriptor;\n  };\n}\nclass NgxIndexedDBService {\n  constructor(dbConfigs, indexedDB) {\n    this.dbConfigs = dbConfigs;\n    this.indexedDB = indexedDB;\n    this.defaultDatabaseName = null;\n    Object.values(this.dbConfigs).forEach((dbConfig, _, ref) => this.instanciateConfig(dbConfig, ref.length === 1));\n  }\n  async instanciateConfig(dbConfig, isOnlyConfig) {\n    if (!dbConfig.name) {\n      throw new Error('NgxIndexedDB: Please, provide the dbName in the configuration');\n    }\n    if (!dbConfig.version) {\n      throw new Error('NgxIndexedDB: Please, provide the db version in the configuration');\n    }\n    if ((dbConfig.isDefault ?? false) && this.defaultDatabaseName) {\n      // A default DB is already configured, throw an error\n      throw new Error('NgxIndexedDB: Only one database can be set as default');\n    }\n    if ((dbConfig.isDefault ?? false) && !this.defaultDatabaseName || isOnlyConfig) {\n      this.defaultDatabaseName = dbConfig.name;\n      this.selectedDb = dbConfig.name;\n    }\n    await CreateObjectStore(this.indexedDB, dbConfig.name, dbConfig.version, dbConfig.objectStoresMeta, dbConfig.migrationFactory);\n    openDatabase(this.indexedDB, dbConfig.name).then(db => {\n      if (db.version !== dbConfig.version) {\n        if (isDevMode()) {\n          console.warn(`\n            Your DB Config doesn't match the most recent version of the DB with name ${dbConfig.name}, please update it\n            DB current version: ${db.version};\n            Your configuration: ${dbConfig.version};\n            `);\n          console.warn(`Using latest version ${db.version}`);\n        }\n        this.dbConfigs[dbConfig.name].version = db.version;\n      }\n      db.close();\n    });\n  }\n  get dbConfig() {\n    return this.dbConfigs[this.selectedDb];\n  }\n  /**\n   * The function return the current version of database\n   *\n   * @Return the current version of database as number\n   */\n  getDatabaseVersion() {\n    return new Observable(obs => {\n      openDatabase(this.indexedDB, this.dbConfig.name, this.dbConfig.version).then(db => {\n        obs.next(db.version);\n        obs.complete();\n      }).catch(err => obs.error(`error during get version of database => ${err} `));\n    });\n  }\n  /**\n   * Selects a database for the current context.\n   * @param {string} [databaseName=undefined] Database name to select.\n   */\n  selectDb(databaseName) {\n    databaseName = databaseName ?? this.defaultDatabaseName;\n    if (!databaseName) {\n      // Name is still null, it means that there is no default database set\n      // and the database name was not specified while calling a method\n      throw new Error(`No database name specified and no default database set.`);\n    }\n    if (!Object.keys(this.dbConfigs).includes(databaseName)) {\n      throw new Error(`NgxIndexedDB: Database ${databaseName} is not initialized.`);\n    }\n    this.selectedDb = databaseName;\n  }\n  /**\n   * Allows to create a new object store ad-hoc\n   * @param storeName The name of the store to be created\n   * @param migrationFactory The migration factory if exists\n   */\n  async createObjectStore(storeSchema, migrationFactory) {\n    const storeSchemas = [storeSchema];\n    await CreateObjectStore(this.indexedDB, this.dbConfig.name, ++this.dbConfig.version, storeSchemas, migrationFactory);\n  }\n  /**\n   * Adds new entry in the store and returns its key\n   * @param storeName The name of the store to add the item\n   * @param value The entry to be added\n   * @param key The optional key for the entry\n   */\n  add(storeName, value, key) {\n    return new Observable(obs => {\n      openDatabase(this.indexedDB, this.dbConfig.name, this.dbConfig.version).then(db => {\n        const transaction = createTransaction(db, optionsGenerator(DBMode.readwrite, storeName, e => obs.error(e)));\n        const objectStore = transaction.objectStore(storeName);\n        const request = Boolean(key) ? objectStore.add(value, key) : objectStore.add(value);\n        request.onsuccess = async evt => {\n          const result = evt.target.result;\n          const getRequest = objectStore.get(result);\n          getRequest.onsuccess = event => {\n            obs.next(event.target.result);\n            obs.complete();\n          };\n          getRequest.onerror = event => {\n            obs.error(event);\n          };\n        };\n        request.onerror = event => {\n          obs.error(event);\n        };\n      }).catch(error => obs.error(error));\n    });\n  }\n  /**\n   * Adds new entries in the store and returns its key\n   * @param storeName The name of the store to add the item\n   * @param values The entries to be added containing optional key attribute\n   */\n  bulkAdd(storeName, values) {\n    const promises = new Promise((resolve, reject) => {\n      openDatabase(this.indexedDB, this.dbConfig.name, this.dbConfig.version).then(db => {\n        const transaction = createTransaction(db, optionsGenerator(DBMode.readwrite, storeName, resolve, reject));\n        const objectStore = transaction.objectStore(storeName);\n        const results = values.map(value => {\n          return new Promise((resolve1, reject1) => {\n            const key = value.key;\n            delete value.key;\n            const request = Boolean(key) ? objectStore.add(value, key) : objectStore.add(value);\n            request.onsuccess = evt => {\n              const result = evt.target.result;\n              resolve1(result);\n            };\n          });\n        });\n        resolve(Promise.all(results));\n      }).catch(reason => reject(reason));\n    });\n    return from(promises);\n  }\n  /**\n   * Delete entries in the store and returns current entries in the store\n   * @param storeName The name of the store to add the item\n   * @param keys The keys to be deleted\n   */\n  bulkDelete(storeName, keys) {\n    const promises = keys.map(key => {\n      return new Promise((resolve, reject) => {\n        openDatabase(this.indexedDB, this.dbConfig.name, this.dbConfig.version).then(db => {\n          const transaction = createTransaction(db, optionsGenerator(DBMode.readwrite, storeName, reject, resolve));\n          const objectStore = transaction.objectStore(storeName);\n          objectStore.delete(key);\n          transaction.oncomplete = () => {\n            this.getAll(storeName).pipe(take(1)).subscribe(newValues => {\n              resolve(newValues);\n            });\n          };\n        }).catch(reason => reject(reason));\n      });\n    });\n    return from(Promise.all(promises));\n  }\n  /**\n   * Returns entry by key.\n   * @param storeName The name of the store to query\n   * @param key The entry key\n   */\n  getByKey(storeName, key) {\n    return new Observable(obs => {\n      openDatabase(this.indexedDB, this.dbConfig.name, this.dbConfig.version).then(db => {\n        const transaction = createTransaction(db, optionsGenerator(DBMode.readonly, storeName, obs.error));\n        const objectStore = transaction.objectStore(storeName);\n        const request = objectStore.get(key);\n        request.onsuccess = event => {\n          obs.next(event.target.result);\n          obs.complete();\n        };\n        request.onerror = event => {\n          obs.error(event);\n        };\n      }).catch(error => obs.error(error));\n    });\n  }\n  /**\n   * Retrieve multiple entries in the store\n   * @param storeName The name of the store to retrieve the items\n   * @param keys The ids entries to be retrieve\n   */\n  bulkGet(storeName, keys) {\n    const observables = keys.map(key => this.getByKey(storeName, key));\n    return new Observable(obs => {\n      combineLatest(observables).subscribe(values => {\n        obs.next(values);\n        obs.complete();\n      });\n    });\n  }\n  /**\n   * Returns entry by id.\n   * @param storeName The name of the store to query\n   * @param id The entry id\n   */\n  getByID(storeName, id) {\n    return new Observable(obs => {\n      openDatabase(this.indexedDB, this.dbConfig.name, this.dbConfig.version).then(db => {\n        validateBeforeTransaction(db, storeName, e => obs.error(e));\n        const transaction = createTransaction(db, optionsGenerator(DBMode.readonly, storeName, obs.error, obs.next));\n        const objectStore = transaction.objectStore(storeName);\n        const request = objectStore.get(id);\n        request.onsuccess = event => {\n          obs.next(event.target.result);\n        };\n      }).catch(error => obs.error(error));\n    });\n  }\n  /**\n   * Returns entry by index.\n   * @param storeName The name of the store to query\n   * @param indexName The index name to filter\n   * @param key The entry key.\n   */\n  getByIndex(storeName, indexName, key) {\n    return new Observable(obs => {\n      openDatabase(this.indexedDB, this.dbConfig.name, this.dbConfig.version).then(db => {\n        validateBeforeTransaction(db, storeName, e => obs.error(e));\n        const transaction = createTransaction(db, optionsGenerator(DBMode.readonly, storeName, obs.error));\n        const objectStore = transaction.objectStore(storeName);\n        const index = objectStore.index(indexName);\n        const request = index.get(key);\n        request.onsuccess = event => {\n          obs.next(event.target.result);\n          obs.complete();\n        };\n      }).catch(reason => obs.error(reason));\n    });\n  }\n  /**\n   * Return all elements from one store\n   * @param storeName The name of the store to select the items\n   */\n  getAll(storeName) {\n    return new Observable(obs => {\n      openDatabase(this.indexedDB, this.dbConfig.name, this.dbConfig.version).then(db => {\n        validateBeforeTransaction(db, storeName, e => obs.error(e));\n        const transaction = createTransaction(db, optionsGenerator(DBMode.readonly, storeName, obs.error, obs.next));\n        const objectStore = transaction.objectStore(storeName);\n        const request = objectStore.getAll();\n        request.onerror = evt => {\n          obs.error(evt);\n        };\n        request.onsuccess = ({\n          target: {\n            result: ResultAll\n          }\n        }) => {\n          obs.next(ResultAll);\n          obs.complete();\n        };\n      }).catch(error => obs.error(error));\n    });\n  }\n  /**\n   * Adds or updates a record in store with the given value and key. Return all items present in the store\n   * @param storeName The name of the store to update\n   * @param value The new value for the entry\n   */\n  update(storeName, value) {\n    return new Observable(obs => {\n      openDatabase(this.indexedDB, this.dbConfig.name, this.dbConfig.version).then(db => {\n        validateBeforeTransaction(db, storeName, e => obs.error(e));\n        const transaction = createTransaction(db, optionsGenerator(DBMode.readwrite, storeName, e => obs.error(e)));\n        const objectStore = transaction.objectStore(storeName);\n        const request = objectStore.put(value);\n        request.onsuccess = async evt => {\n          const result = evt.target.result;\n          const getRequest = objectStore.get(result);\n          getRequest.onsuccess = event => {\n            obs.next(event.target.result);\n            obs.complete();\n          };\n        };\n      }).catch(reason => obs.error(reason));\n    });\n  }\n  /**\n   * Adds or updates a record in store with the given value and key. Return all items present in the store\n   * @param storeName The name of the store to update\n   * @param items The values to update in the DB\n   *\n   * @Return The return value is an Observable with the primary key of the object that was last in given array\n   *\n   * @error If the call to bulkPut fails the transaction will be aborted and previously inserted entities will be deleted\n   */\n  bulkPut(storeName, items) {\n    let transaction;\n    return new Observable(obs => {\n      openDatabase(this.indexedDB, this.dbConfig.name, this.dbConfig.version).then(db => {\n        validateBeforeTransaction(db, storeName, e => obs.error(e));\n        transaction = createTransaction(db, optionsGenerator(DBMode.readwrite, storeName, e => obs.error(e)));\n        const objectStore = transaction.objectStore(storeName);\n        items.forEach((item, index) => {\n          const request = objectStore.put(item);\n          if (index === items.length - 1) {\n            request.onsuccess = evt => {\n              transaction.commit();\n              obs.next(evt.target.result);\n              obs.complete();\n            };\n          }\n          request.onerror = evt => {\n            transaction.abort();\n            obs.error(evt);\n          };\n        });\n      }).catch(reason => {\n        transaction?.abort();\n        obs.error(reason);\n      });\n    });\n  }\n  /**\n   * Returns all items from the store after delete.\n   * @param storeName The name of the store to have the entry deleted\n   * @param key The key of the entry to be deleted\n   */\n  delete(storeName, key) {\n    return new Observable(obs => {\n      openDatabase(this.indexedDB, this.dbConfig.name, this.dbConfig.version).then(db => {\n        validateBeforeTransaction(db, storeName, e => obs.error(e));\n        const transaction = createTransaction(db, optionsGenerator(DBMode.readwrite, storeName, e => obs.error(e)));\n        const objectStore = transaction.objectStore(storeName);\n        objectStore.delete(key);\n        transaction.oncomplete = () => {\n          this.getAll(storeName).pipe(take(1)).subscribe(newValues => {\n            obs.next(newValues);\n            obs.complete();\n          });\n        };\n      }).catch(reason => obs.error(reason));\n    });\n  }\n  /**\n   * Returns true from the store after a successful delete.\n   * @param storeName The name of the store to have the entry deleted\n   * @param key The key of the entry to be deleted\n   */\n  deleteByKey(storeName, key) {\n    return new Observable(obs => {\n      openDatabase(this.indexedDB, this.dbConfig.name, this.dbConfig.version).then(db => {\n        validateBeforeTransaction(db, storeName, e => obs.error(e));\n        const transaction = createTransaction(db, optionsGenerator(DBMode.readwrite, storeName, e => obs.error(e)));\n        const objectStore = transaction.objectStore(storeName);\n        transaction.oncomplete = () => {\n          obs.next(true);\n          obs.complete();\n        };\n        objectStore.delete(key);\n      }).catch(reason => obs.error(reason));\n    });\n  }\n  /**\n   * Returns true if successfully delete all entries from the store.\n   * @param storeName The name of the store to have the entries deleted\n   */\n  clear(storeName) {\n    return new Observable(obs => {\n      openDatabase(this.indexedDB, this.dbConfig.name, this.dbConfig.version).then(db => {\n        validateBeforeTransaction(db, storeName, e => obs.error(e));\n        const transaction = createTransaction(db, optionsGenerator(DBMode.readwrite, storeName, e => obs.error(e)));\n        const objectStore = transaction.objectStore(storeName);\n        objectStore.clear();\n        transaction.oncomplete = () => {\n          obs.next(true);\n          obs.complete();\n        };\n      }).catch(reason => obs.error(reason));\n    });\n  }\n  /**\n   * Returns true if successfully delete the DB.\n   */\n  deleteDatabase() {\n    return new Observable(obs => {\n      openDatabase(this.indexedDB, this.dbConfig.name, this.dbConfig.version).then(async db => {\n        await db.close();\n        const deleteDBRequest = this.indexedDB.deleteDatabase(this.dbConfig.name);\n        deleteDBRequest.onsuccess = () => {\n          obs.next(true);\n          obs.complete();\n        };\n        deleteDBRequest.onerror = error => obs.error(error);\n        deleteDBRequest.onblocked = () => {\n          console.warn('Delete blocked: Ensure all tabs, instances, or connections are closed. Database name:', this.dbConfig.name);\n          obs.error(new Error(\"Unable to delete database because it's blocked\"));\n        };\n      }).catch(error => obs.error(error));\n    });\n  }\n  /**\n   * Returns the open cursor event\n   * @param storeName The name of the store to have the entries deleted\n   * @param keyRange The key range which the cursor should be open on\n   * @param direction A string telling the cursor which direction to travel. The default is next\n   */\n  openCursor(storeName, keyRange, direction = 'next') {\n    return new Observable(obs => {\n      openDatabase(this.indexedDB, this.dbConfig.name, this.dbConfig.version).then(db => {\n        validateBeforeTransaction(db, storeName, e => obs.error(e));\n        const transaction = createTransaction(db, optionsGenerator(DBMode.readwrite, storeName, obs.error));\n        const objectStore = transaction.objectStore(storeName);\n        const request = keyRange === undefined ? objectStore.openCursor() : objectStore.openCursor(keyRange, direction);\n        request.onsuccess = event => {\n          obs.next(event);\n          obs.complete();\n        };\n      }).catch(reason => obs.error(reason));\n    });\n  }\n  /**\n   * Open a cursor by index filter.\n   * @param storeName The name of the store to query.\n   * @param indexName The index name to filter.\n   * @param keyRange The range value and criteria to apply on the index.\n   */\n  openCursorByIndex(storeName, indexName, keyRange, direction = 'next', mode = DBMode.readonly) {\n    const obs = new Subject();\n    openDatabase(this.indexedDB, this.dbConfig.name, this.dbConfig.version).then(db => {\n      validateBeforeTransaction(db, storeName, reason => {\n        obs.error(reason);\n      });\n      const transaction = createTransaction(db, optionsGenerator(mode, storeName, reason => {\n        obs.error(reason);\n      }, () => {\n        obs.next();\n      }));\n      const objectStore = transaction.objectStore(storeName);\n      const index = objectStore.index(indexName);\n      const request = index.openCursor(keyRange, direction);\n      request.onsuccess = event => {\n        obs.next(event);\n      };\n    }).catch(reason => obs.error(reason));\n    return obs;\n  }\n  /**\n   * Returns all items by an index.\n   * @param storeName The name of the store to query\n   * @param indexName The index name to filter\n   * @param keyRange  The range value and criteria to apply on the index.\n   */\n  getAllByIndex(storeName, indexName, keyRange) {\n    const data = [];\n    return new Observable(obs => {\n      openDatabase(this.indexedDB, this.dbConfig.name, this.dbConfig.version).then(db => {\n        validateBeforeTransaction(db, storeName, e => obs.error(e));\n        const transaction = createTransaction(db, optionsGenerator(DBMode.readonly, storeName, obs.error));\n        const objectStore = transaction.objectStore(storeName);\n        const index = objectStore.index(indexName);\n        const request = index.openCursor(keyRange);\n        request.onsuccess = event => {\n          const cursor = event.target.result;\n          if (cursor) {\n            data.push(cursor.value);\n            cursor.continue();\n          } else {\n            obs.next(data);\n            obs.complete();\n          }\n        };\n      }).catch(reason => obs.error(reason));\n    });\n  }\n  /**\n   * Returns all primary keys by an index.\n   * @param storeName The name of the store to query\n   * @param indexName The index name to filter\n   * @param keyRange  The range value and criteria to apply on the index.\n   */\n  getAllKeysByIndex(storeName, indexName, keyRange) {\n    const data = [];\n    return new Observable(obs => {\n      openDatabase(this.indexedDB, this.dbConfig.name, this.dbConfig.version).then(db => {\n        validateBeforeTransaction(db, storeName, e => obs.error(e));\n        const transaction = createTransaction(db, optionsGenerator(DBMode.readonly, storeName, obs.error));\n        const objectStore = transaction.objectStore(storeName);\n        const index = objectStore.index(indexName);\n        const request = index.openKeyCursor(keyRange);\n        request.onsuccess = event => {\n          const cursor = event.target.result;\n          if (cursor) {\n            data.push({\n              primaryKey: cursor.primaryKey,\n              key: cursor.key\n            });\n            cursor.continue();\n          } else {\n            obs.next(data);\n            obs.complete();\n          }\n        };\n      }).catch(reason => obs.error(reason));\n    });\n  }\n  /**\n   * Returns the number of rows in a store.\n   * @param storeName The name of the store to query\n   * @param keyRange  The range value and criteria to apply.\n   */\n  count(storeName, keyRange) {\n    return new Observable(obs => {\n      openDatabase(this.indexedDB, this.dbConfig.name, this.dbConfig.version).then(db => {\n        validateBeforeTransaction(db, storeName, e => obs.error(e));\n        const transaction = createTransaction(db, optionsGenerator(DBMode.readonly, storeName, obs.error));\n        const objectStore = transaction.objectStore(storeName);\n        const request = objectStore.count(keyRange);\n        request.onerror = e => obs.error(e);\n        request.onsuccess = e => {\n          obs.next(e.target.result);\n          obs.complete();\n        };\n      }).catch(reason => obs.error(reason));\n    });\n  }\n  /**\n   * Returns the number of rows in a store.\n   * @param storeName The name of the store to query\n   * @param keyRange  The range value and criteria to apply.\n   */\n  countByIndex(storeName, indexName, keyRange) {\n    return new Observable(obs => {\n      openDatabase(this.indexedDB, this.dbConfig.name, this.dbConfig.version).then(db => {\n        validateBeforeTransaction(db, storeName, e => obs.error(e));\n        const transaction = createTransaction(db, optionsGenerator(DBMode.readonly, storeName, obs.error));\n        const objectStore = transaction.objectStore(storeName);\n        const index = objectStore.index(indexName);\n        const request = index.count(keyRange);\n        request.onerror = e => obs.error(e);\n        request.onsuccess = e => {\n          obs.next(e.target.result);\n          obs.complete();\n        };\n      }).catch(reason => obs.error(reason));\n    });\n  }\n  /**\n   * Delete the store by name.\n   * @param storeName The name of the store to query\n   */\n  deleteObjectStore(storeName) {\n    return DeleteObjectStore(this.dbConfig.name, ++this.dbConfig.version, storeName);\n  }\n  /**\n   * Get all object store names.\n   */\n  getAllObjectStoreNames() {\n    return new Observable(obs => {\n      openDatabase(this.indexedDB, this.dbConfig.name, this.dbConfig.version).then(db => {\n        obs.next([...db.objectStoreNames]);\n        obs.complete();\n      }).catch(reason => obs.error(reason));\n    });\n  }\n  static {\n    this.ɵfac = function NgxIndexedDBService_Factory(t) {\n      return new (t || NgxIndexedDBService)(i0.ɵɵinject(CONFIG_TOKEN), i0.ɵɵinject(INDEXED_DB));\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: NgxIndexedDBService,\n      factory: NgxIndexedDBService.ɵfac\n    });\n  }\n}\n__decorate([CloseDbConnection()], NgxIndexedDBService.prototype, \"getDatabaseVersion\", null);\n__decorate([CloseDbConnection()], NgxIndexedDBService.prototype, \"add\", null);\n__decorate([CloseDbConnection()], NgxIndexedDBService.prototype, \"bulkAdd\", null);\n__decorate([CloseDbConnection()], NgxIndexedDBService.prototype, \"bulkDelete\", null);\n__decorate([CloseDbConnection()], NgxIndexedDBService.prototype, \"getByKey\", null);\n__decorate([CloseDbConnection()], NgxIndexedDBService.prototype, \"bulkGet\", null);\n__decorate([CloseDbConnection()], NgxIndexedDBService.prototype, \"getByID\", null);\n__decorate([CloseDbConnection()], NgxIndexedDBService.prototype, \"getByIndex\", null);\n__decorate([CloseDbConnection()], NgxIndexedDBService.prototype, \"getAll\", null);\n__decorate([CloseDbConnection()], NgxIndexedDBService.prototype, \"update\", null);\n__decorate([CloseDbConnection()], NgxIndexedDBService.prototype, \"bulkPut\", null);\n__decorate([CloseDbConnection()], NgxIndexedDBService.prototype, \"delete\", null);\n__decorate([CloseDbConnection()], NgxIndexedDBService.prototype, \"deleteByKey\", null);\n__decorate([CloseDbConnection()], NgxIndexedDBService.prototype, \"clear\", null);\n__decorate([CloseDbConnection()], NgxIndexedDBService.prototype, \"deleteDatabase\", null);\n__decorate([CloseDbConnection()], NgxIndexedDBService.prototype, \"openCursor\", null);\n__decorate([CloseDbConnection()], NgxIndexedDBService.prototype, \"openCursorByIndex\", null);\n__decorate([CloseDbConnection()], NgxIndexedDBService.prototype, \"getAllByIndex\", null);\n__decorate([CloseDbConnection()], NgxIndexedDBService.prototype, \"getAllKeysByIndex\", null);\n__decorate([CloseDbConnection()], NgxIndexedDBService.prototype, \"count\", null);\n__decorate([CloseDbConnection()], NgxIndexedDBService.prototype, \"countByIndex\", null);\n__decorate([CloseDbConnection()], NgxIndexedDBService.prototype, \"getAllObjectStoreNames\", null);\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxIndexedDBService, [{\n    type: Injectable\n  }], () => [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [CONFIG_TOKEN]\n    }]\n  }, {\n    type: IDBFactory,\n    decorators: [{\n      type: Inject,\n      args: [INDEXED_DB]\n    }]\n  }], {\n    getDatabaseVersion: [],\n    add: [],\n    bulkAdd: [],\n    bulkDelete: [],\n    getByKey: [],\n    bulkGet: [],\n    getByID: [],\n    getByIndex: [],\n    getAll: [],\n    update: [],\n    bulkPut: [],\n    delete: [],\n    deleteByKey: [],\n    clear: [],\n    deleteDatabase: [],\n    openCursor: [],\n    openCursorByIndex: [],\n    getAllByIndex: [],\n    getAllKeysByIndex: [],\n    count: [],\n    countByIndex: [],\n    getAllObjectStoreNames: []\n  });\n})();\n\n/**\n *\n * A class that implements the IDBFactory interface, but only for the server.\n * All methods return a mocked value.\n *\n */\nclass ServerIndexedDB {\n  cmp() {\n    return 0;\n  }\n  databases() {\n    return Promise.resolve([]);\n  }\n  deleteDatabase() {\n    return {\n      onupgradeneeded: null,\n      onblocked: null,\n      onerror: null,\n      onsuccess: null,\n      error: null\n    };\n  }\n  open() {\n    return {\n      onupgradeneeded: null,\n      onblocked: null,\n      onerror: null,\n      onsuccess: null,\n      error: null\n    };\n  }\n}\n\n/**\n * Factory function for creating an instance of IDBFactory.\n *\n * It determines the platform using the {@link PLATFORM_ID} to decide whether to use the\n * browser's IndexedDB or a server-side implementation.\n *\n * @returns {IDBFactory} IDBFactory.\n */\nfunction indexedDbFactory() {\n  assertInInjectionContext(indexedDbFactory);\n  const platformId = inject(PLATFORM_ID);\n  const serverIndexedDB = inject(SERVER_INDEXED_DB, {\n    optional: true\n  }) ?? new ServerIndexedDB();\n  return isPlatformBrowser(platformId) ? inject(DOCUMENT).defaultView.indexedDB : serverIndexedDB;\n}\nconst provideIndexedDb = (...dbConfigs) => {\n  return makeEnvironmentProviders([..._provideIndexedDb(...dbConfigs)]);\n};\nconst _provideIndexedDb = (...dbConfigs) => {\n  const configs = dbConfigs.reduce((acc, curr) => {\n    acc[curr.name] = curr;\n    return acc;\n  }, {});\n  return [NgxIndexedDBService, {\n    provide: CONFIG_TOKEN,\n    useValue: configs\n  }, {\n    provide: INDEXED_DB,\n    useFactory: indexedDbFactory\n  }];\n};\nclass NgxIndexedDBModule {\n  static forRoot(...dbConfigs) {\n    return {\n      ngModule: NgxIndexedDBModule,\n      providers: [..._provideIndexedDb(...dbConfigs)]\n    };\n  }\n  static {\n    this.ɵfac = function NgxIndexedDBModule_Factory(t) {\n      return new (t || NgxIndexedDBModule)();\n    };\n  }\n  static {\n    this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: NgxIndexedDBModule\n    });\n  }\n  static {\n    this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxIndexedDBModule, [{\n    type: NgModule\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CONFIG_TOKEN, DBMode, INDEXED_DB, NgxIndexedDBModule, NgxIndexedDBService, SERVER_INDEXED_DB, provideIndexedDb };\n"],
  "mappings": "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",
  "names": ["DBMode", "indexedDB"]
}
